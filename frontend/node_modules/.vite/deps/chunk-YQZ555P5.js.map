{
  "version": 3,
  "sources": ["../../ol/ObjectEventType.js", "../../ol/Observable.js", "../../ol/Object.js"],
  "sourcesContent": ["/**\n * @module ol/ObjectEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered when a property is changed.\n   * @event module:ol/Object.ObjectEvent#propertychange\n   * @api\n   */\n  PROPERTYCHANGE: 'propertychange',\n};\n\n/**\n * @typedef {'propertychange'} Types\n */\n", "/**\n * @module ol/Observable\n */\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\nimport {listen, listenOnce, unlistenByKey} from './events.js';\n\n/***\n * @template {string} Type\n * @template {Event|import(\"./events/Event.js\").default} EventClass\n * @template Return\n * @typedef {(type: Type, listener: (event: EventClass) => ?) => Return} OnSignature\n */\n\n/***\n * @template {string} Type\n * @template Return\n * @typedef {(type: Type[], listener: (event: Event|import(\"./events/Event\").default) => ?) => Return extends void ? void : Return[]} CombinedOnSignature\n */\n\n/**\n * @typedef {'change'|'error'} EventTypes\n */\n\n/***\n * @template Return\n * @typedef {OnSignature<EventTypes, import(\"./events/Event.js\").default, Return> & CombinedOnSignature<EventTypes, Return>} ObservableOnSignature\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * An event target providing convenient methods for listener registration\n * and unregistration. A generic `change` event is always available through\n * {@link module:ol/Observable~Observable#changed}.\n *\n * @fires import(\"./events/Event.js\").default\n * @api\n */\nclass Observable extends EventTarget {\n  constructor() {\n    super();\n\n    this.on =\n      /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */ (\n        this.onInternal\n      );\n\n    this.once =\n      /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */ (\n        this.onceInternal\n      );\n\n    this.un = /** @type {ObservableOnSignature<void>} */ (this.unInternal);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.revision_ = 0;\n  }\n\n  /**\n   * Increases the revision counter and dispatches a 'change' event.\n   * @api\n   */\n  changed() {\n    ++this.revision_;\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  /**\n   * Get the version number for this object.  Each time the object is modified,\n   * its version number will be incremented.\n   * @return {number} Revision.\n   * @api\n   */\n  getRevision() {\n    return this.revision_;\n  }\n\n  /**\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\n   * @protected\n   */\n  onInternal(type, listener) {\n    if (Array.isArray(type)) {\n      const len = type.length;\n      const keys = new Array(len);\n      for (let i = 0; i < len; ++i) {\n        keys[i] = listen(this, type[i], listener);\n      }\n      return keys;\n    }\n    return listen(this, /** @type {string} */ (type), listener);\n  }\n\n  /**\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\n   * @protected\n   */\n  onceInternal(type, listener) {\n    let key;\n    if (Array.isArray(type)) {\n      const len = type.length;\n      key = new Array(len);\n      for (let i = 0; i < len; ++i) {\n        key[i] = listenOnce(this, type[i], listener);\n      }\n    } else {\n      key = listenOnce(this, /** @type {string} */ (type), listener);\n    }\n    /** @type {Object} */ (listener).ol_key = key;\n    return key;\n  }\n\n  /**\n   * Unlisten for a certain type of event.\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @protected\n   */\n  unInternal(type, listener) {\n    const key = /** @type {Object} */ (listener).ol_key;\n    if (key) {\n      unByKey(key);\n    } else if (Array.isArray(type)) {\n      for (let i = 0, ii = type.length; i < ii; ++i) {\n        this.removeEventListener(type[i], listener);\n      }\n    } else {\n      this.removeEventListener(type, listener);\n    }\n  }\n}\n\n/**\n * Listen for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\nObservable.prototype.on;\n\n/**\n * Listen once for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\nObservable.prototype.once;\n\n/**\n * Unlisten for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @api\n */\nObservable.prototype.un;\n\n/**\n * Removes an event listener using the key returned by `on()` or `once()`.\n * @param {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} key The key returned by `on()`\n *     or `once()` (or an array of keys).\n * @api\n */\nexport function unByKey(key) {\n  if (Array.isArray(key)) {\n    for (let i = 0, ii = key.length; i < ii; ++i) {\n      unlistenByKey(key[i]);\n    }\n  } else {\n    unlistenByKey(/** @type {import(\"./events.js\").EventsKey} */ (key));\n  }\n}\n\nexport default Observable;\n", "/**\n * @module ol/Object\n */\nimport Event from './events/Event.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport Observable from './Observable.js';\nimport {getUid} from './util.js';\nimport {isEmpty} from './obj.js';\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.\n */\nexport class ObjectEvent extends Event {\n  /**\n   * @param {string} type The event type.\n   * @param {string} key The property name.\n   * @param {*} oldValue The old value for `key`.\n   */\n  constructor(type, key, oldValue) {\n    super(type);\n\n    /**\n     * The name of the property whose value is changing.\n     * @type {string}\n     * @api\n     */\n    this.key = key;\n\n    /**\n     * The old value. To get the new value use `e.target.get(e.key)` where\n     * `e` is the event object.\n     * @type {*}\n     * @api\n     */\n    this.oldValue = oldValue;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types, ObjectEvent, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types, Return>} ObjectOnSignature\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Most non-trivial classes inherit from this.\n *\n * This extends {@link module:ol/Observable~Observable} with observable\n * properties, where each property is observable as well as the object as a\n * whole.\n *\n * Classes that inherit from this have pre-defined properties, to which you can\n * add your owns. The pre-defined properties are listed in this documentation as\n * 'Observable Properties', and have their own accessors; for example,\n * {@link module:ol/Map~Map} has a `target` property, accessed with\n * `getTarget()` and changed with `setTarget()`. Not all properties are however\n * settable. There are also general-purpose accessors `get()` and `set()`. For\n * example, `get('target')` is equivalent to `getTarget()`.\n *\n * The `set` accessors trigger a change event, and you can monitor this by\n * registering a listener. For example, {@link module:ol/View~View} has a\n * `center` property, so `view.on('change:center', function(evt) {...});` would\n * call the function whenever the value of the center property changes. Within\n * the function, `evt.target` would be the view, so `evt.target.getCenter()`\n * would return the new center.\n *\n * You can add your own observable properties with\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\n * You can listen for changes on that property value with\n * `object.on('change:prop', listener)`. You can get a list of all\n * properties with {@link module:ol/Object~BaseObject#getProperties}.\n *\n * Note that the observable properties are separate from standard JS properties.\n * You can, for example, give your map object a title with\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\n * first will be a `hasOwnProperty`; the second will appear in\n * `getProperties()`. Only the second is observable.\n *\n * Properties can be deleted by using the unset method. E.g.\n * object.unset('foo').\n *\n * @fires ObjectEvent\n * @api\n */\nclass BaseObject extends Observable {\n  /**\n   * @param {Object<string, *>} [values] An object with key-value pairs.\n   */\n  constructor(values) {\n    super();\n\n    /***\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ObjectOnSignature<void>}\n     */\n    this.un;\n\n    // Call {@link module:ol/util.getUid} to ensure that the order of objects' ids is\n    // the same as the order in which they were created.  This also helps to\n    // ensure that object properties are always added in the same order, which\n    // helps many JavaScript engines generate faster code.\n    getUid(this);\n\n    /**\n     * @private\n     * @type {Object<string, *>|null}\n     */\n    this.values_ = null;\n\n    if (values !== undefined) {\n      this.setProperties(values);\n    }\n  }\n\n  /**\n   * Gets a value.\n   * @param {string} key Key name.\n   * @return {*} Value.\n   * @api\n   */\n  get(key) {\n    let value;\n    if (this.values_ && this.values_.hasOwnProperty(key)) {\n      value = this.values_[key];\n    }\n    return value;\n  }\n\n  /**\n   * Get a list of object property names.\n   * @return {Array<string>} List of property names.\n   * @api\n   */\n  getKeys() {\n    return (this.values_ && Object.keys(this.values_)) || [];\n  }\n\n  /**\n   * Get an object of all property names and values.\n   * @return {Object<string, *>} Object.\n   * @api\n   */\n  getProperties() {\n    return (this.values_ && Object.assign({}, this.values_)) || {};\n  }\n\n  /**\n   * Get an object of all property names and values.\n   * @return {Object<string, *>?} Object.\n   */\n  getPropertiesInternal() {\n    return this.values_;\n  }\n\n  /**\n   * @return {boolean} The object has properties.\n   */\n  hasProperties() {\n    return !!this.values_;\n  }\n\n  /**\n   * @param {string} key Key name.\n   * @param {*} oldValue Old value.\n   */\n  notify(key, oldValue) {\n    let eventType;\n    eventType = `change:${key}`;\n    if (this.hasListener(eventType)) {\n      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    }\n    eventType = ObjectEventType.PROPERTYCHANGE;\n    if (this.hasListener(eventType)) {\n      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    }\n  }\n\n  /**\n   * @param {string} key Key name.\n   * @param {import(\"./events.js\").Listener} listener Listener.\n   */\n  addChangeListener(key, listener) {\n    this.addEventListener(`change:${key}`, listener);\n  }\n\n  /**\n   * @param {string} key Key name.\n   * @param {import(\"./events.js\").Listener} listener Listener.\n   */\n  removeChangeListener(key, listener) {\n    this.removeEventListener(`change:${key}`, listener);\n  }\n\n  /**\n   * Sets a value.\n   * @param {string} key Key name.\n   * @param {*} value Value.\n   * @param {boolean} [silent] Update without triggering an event.\n   * @api\n   */\n  set(key, value, silent) {\n    const values = this.values_ || (this.values_ = {});\n    if (silent) {\n      values[key] = value;\n    } else {\n      const oldValue = values[key];\n      values[key] = value;\n      if (oldValue !== value) {\n        this.notify(key, oldValue);\n      }\n    }\n  }\n\n  /**\n   * Sets a collection of key-value pairs.  Note that this changes any existing\n   * properties and adds new ones (it does not remove any existing properties).\n   * @param {Object<string, *>} values Values.\n   * @param {boolean} [silent] Update without triggering an event.\n   * @api\n   */\n  setProperties(values, silent) {\n    for (const key in values) {\n      this.set(key, values[key], silent);\n    }\n  }\n\n  /**\n   * Apply any properties from another object without triggering events.\n   * @param {BaseObject} source The source object.\n   * @protected\n   */\n  applyProperties(source) {\n    if (!source.values_) {\n      return;\n    }\n    Object.assign(this.values_ || (this.values_ = {}), source.values_);\n  }\n\n  /**\n   * Unsets a property.\n   * @param {string} key Key name.\n   * @param {boolean} [silent] Unset without triggering an event.\n   * @api\n   */\n  unset(key, silent) {\n    if (this.values_ && key in this.values_) {\n      const oldValue = this.values_[key];\n      delete this.values_[key];\n      if (isEmpty(this.values_)) {\n        this.values_ = null;\n      }\n      if (!silent) {\n        this.notify(key, oldValue);\n      }\n    }\n  }\n}\n\nexport default BaseObject;\n"],
  "mappings": "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",
  "names": []
}
